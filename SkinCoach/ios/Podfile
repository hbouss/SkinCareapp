# ios/Podfile

# 1) Stub global pour Expo.podspec
def get_folly_config
  # Renvoie un tableau vide de flags pour satisfaire Expo.podspec
  { compiler_flags: [] }
end

# 2) Exécutables React Native & Expo autolinking
require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

# 3) Chargement des propriétés générées par expo prebuild
require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

platform :ios, podfile_properties['ios.deploymentTarget'] || '13.0'

install! 'cocoapods',
  :deterministic_uuids => false

# 4) UNIQUE target pour votre app
target 'SkinCoach' do
  # Use Expo modules (génère le Podspec et intègre Expo.podspec)
  use_expo_modules!

  # Use all the native modules autolinkés
  config = use_native_modules!

  # Si vous voulez forcer frameworks dynamiques
  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']

  # Flags par défaut (Hermes, Fabric…)
  flags = get_default_flags()

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == 'hermes',
    :fabric_enabled => flags[:fabric_enabled],
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  post_install do |installer|
    react_native_post_install(installer, :mac_catalyst_enabled => false)
    __apply_Xcode_12_5_M1_post_install_workaround(installer)

    installer.target_installation_results.pod_target_installation_results.each do |_, result|
      result.resource_bundle_targets.each do |bundle_target|
        bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end
end